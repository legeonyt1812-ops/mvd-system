// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let systemData = {
    citizens: [],
    drivers: [],
    migration: [],
    pdn: [],
    cusp: [],
    adminProtocols: [],
    criminalCases: [],
    wanted: [],
    stateSecret: {
        terrorists: [],
        terroristOrgs: [],
        extremists: [],
        unwanted: [],
        foreignAgents: []
    },
    debtors: [],
    journal: [],
    news: [],
    operational: []
};

let currentUser = null;
let currentModule = 'dashboard';
let editingId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    currentUser = JSON.parse(localStorage.getItem('mvd_current_user'));
    
    if (!currentUser) {
        window.location.href = 'auth.html';
        return;
    }
    
    initSystem();
});

async function initSystem() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    showNotification('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase...', 'info');
    
    await loadAllData();
    initRealtimeUpdates();
    updateUserInfo();
    showModule('dashboard');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    setTimeout(() => {
        if (systemData.citizens.length === 0) {
            showNotification('‚ö†Ô∏è –ë–∞–∑–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞', 'warning');
        } else {
            showNotification('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
        }
    }, 2000);
}

function updateUserInfo() {
    const userInfo = document.getElementById('userInfo');
    if (userInfo && currentUser) {
        userInfo.innerHTML = `
            <strong>${currentUser.fullName}</strong><br>
            <small>${currentUser.position} | ${currentUser.rank}</small>
        `;
    }
}

function logout() {
    localStorage.removeItem('mvd_current_user');
    window.location.href = 'auth.html';
}

// === FIREBASE –§–£–ù–ö–¶–ò–ò ===
function initRealtimeUpdates() {
    database.ref('systemData/').on('value', (snapshot) => {
        const data = snapshot.val();
        if (data) {
            systemData = data;
            updateCurrentModule();
            showNotification('üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'info');
        }
    });
}

async function loadAllData() {
    try {
        const snapshot = await database.ref('systemData/').once('value');
        const data = snapshot.val();
        if (data) {
            systemData = data;
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Firebase');
        } else {
            console.log('‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        const backup = localStorage.getItem('mvd_backup');
        if (backup) {
            systemData = JSON.parse(backup);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        }
    }
}

async function saveAllData() {
    try {
        await database.ref('systemData').set(systemData);
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        localStorage.setItem('mvd_backup', JSON.stringify(systemData));
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        try {
            localStorage.setItem('mvd_backup', JSON.stringify(systemData));
            console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
        }
        return false;
    }
}

// === –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 5px;
        color: white;
        z-index: 10000;
        font-weight: bold;
        max-width: 300px;
        transition: all 0.3s;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    `;
    
    const colors = {
        success: '#27ae60',
        error: '#e74c3c', 
        warning: '#f39c12',
        info: '#3498db'
    };
    
    notification.style.background = colors[type] || colors.info;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 4000);
}

// === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ö–†–´–¢–ò–Ø –í–°–ï–• –§–û–†–ú ===
function hideAllForms() {
    const forms = [
        'citizenFormContainer', 'driverFormContainer', 'migrationFormContainer',
        'pdnFormContainer', 'operationalFormContainer', 'cuspFormContainer',
        'adminProtocolFormContainer', 'criminalCaseFormContainer', 'wantedFormContainer',
        'debtorFormContainer'
    ];
    
    forms.forEach(formId => {
        const form = document.getElementById(formId);
        if (form) form.style.display = 'none';
    });
    editingId = null;
}

// === –û–°–ù–û–í–ù–´–ï –ú–û–î–£–õ–ò ===
function showModule(moduleName) {
    currentModule = moduleName;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π
    hideAllForms();
    
    editingId = null;
    const moduleContent = document.getElementById('moduleContent');
    
    switch(moduleName) {
        case 'citizens':
            moduleContent.innerHTML = getCitizensModule();
            loadCitizensTable();
            break;
        case 'drivers':
            moduleContent.innerHTML = getDriversModule();
            loadDriversTable();
            break;
        case 'migration':
            moduleContent.innerHTML = getMigrationModule();
            loadMigrationTable();
            break;
        case 'pdn':
            moduleContent.innerHTML = getPDNModule();
            loadPDNTable();
            break;
        case 'operational':
            moduleContent.innerHTML = getOperationalModule();
            loadOperationalTable();
            break;
        case 'cusp':
            moduleContent.innerHTML = getCUSPModule();
            loadCUSPTable();
            break;
        case 'admin_protocols':
            moduleContent.innerHTML = getAdminProtocolsModule();
            loadAdminProtocolsTable();
            break;
        case 'criminal_cases':
            moduleContent.innerHTML = getCriminalCasesModule();
            loadCriminalCasesTable();
            break;
        case 'wanted':
            moduleContent.innerHTML = getWantedModule();
            loadWantedTable();
            break;
        case 'state_secret':
            moduleContent.innerHTML = getStateSecretModule();
            loadStateSecretData();
            break;
        case 'debtors':
            moduleContent.innerHTML = getDebtorsModule();
            loadDebtorsTable();
            break;
        case 'journal':
            moduleContent.innerHTML = getJournalModule();
            loadJournalEntries();
            break;
        case 'news':
            moduleContent.innerHTML = getNewsModule();
            loadNews();
            break;
        case 'games':
            moduleContent.innerHTML = getGamesModule();
            break;
        default:
            moduleContent.innerHTML = getDashboardModule();
    }
}

function updateCurrentModule() {
    showModule(currentModule);
}

// === –ú–û–î–£–õ–¨ –ë–ê–ó–´ –ì–†–ê–ñ–î–ê–ù ===
function getCitizensModule() {
    return `
        <div class="module">
            <h2>üë• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω</h2>
            <div class="search-box">
                <input type="text" id="searchCitizens" placeholder="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º—É..." onkeyup="searchCitizens()">
            </div>
            <button class="btn btn-success" onclick="showCitizenForm()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞</button>
            
            <div id="citizenFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'} –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞</h3>
                <form onsubmit="saveCitizen(event)">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–∏–∫–Ω–µ–π–º:</label>
                            <input type="text" id="citizenNickname" required>
                        </div>
                        <div class="form-group">
                            <label>–§–ò–û:</label>
                            <input type="text" id="citizenFullName" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                            <input type="date" id="citizenBirthDate">
                        </div>
                        <div class="form-group">
                            <label>–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:</label>
                            <input type="text" id="citizenPassport">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</label>
                        <input type="text" id="citizenAddress">
                    </div>
                    <div class="form-group">
                        <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</label>
                        <textarea id="citizenAdditionalInfo" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="citizenCriminalRecord"> –ò–º–µ–µ—Ç —Å—É–¥–∏–º–æ—Å—Ç—å
                        </label>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideCitizenForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="citizensTableContainer"></div>
        </div>
    `;
}

function showCitizenForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('citizenFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('citizenNickname').value = '';
        document.getElementById('citizenFullName').value = '';
        document.getElementById('citizenBirthDate').value = '';
        document.getElementById('citizenPassport').value = '';
        document.getElementById('citizenAddress').value = '';
        document.getElementById('citizenAdditionalInfo').value = '';
        document.getElementById('citizenCriminalRecord').checked = false;
    }
}

function hideCitizenForm() {
    const form = document.getElementById('citizenFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveCitizen(event) {
    event.preventDefault();
    
    const citizen = {
        id: editingId || Date.now(),
        nickname: document.getElementById('citizenNickname').value,
        fullName: document.getElementById('citizenFullName').value,
        birthDate: document.getElementById('citizenBirthDate').value,
        passportNumber: document.getElementById('citizenPassport').value,
        address: document.getElementById('citizenAddress').value,
        additionalInfo: document.getElementById('citizenAdditionalInfo').value,
        criminalRecord: document.getElementById('citizenCriminalRecord').checked,
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.citizens.findIndex(c => c.id === editingId);
        if (index !== -1) {
            systemData.citizens[index] = citizen;
        }
    } else {
        systemData.citizens.push(citizen);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
    }
    loadCitizensTable();
    hideCitizenForm();
}

function editCitizen(id) {
    const citizen = systemData.citizens.find(c => c.id === id);
    if (citizen) {
        editingId = id;
        const form = document.getElementById('citizenFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('citizenNickname').value = citizen.nickname;
            document.getElementById('citizenFullName').value = citizen.fullName;
            document.getElementById('citizenBirthDate').value = citizen.birthDate;
            document.getElementById('citizenPassport').value = citizen.passportNumber;
            document.getElementById('citizenAddress').value = citizen.address;
            document.getElementById('citizenAdditionalInfo').value = citizen.additionalInfo;
            document.getElementById('citizenCriminalRecord').checked = citizen.criminalRecord;
        }
    }
}

function loadCitizensTable() {
    const container = document.getElementById('citizensTableContainer');
    if (!container) return;
    
    if (systemData.citizens.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä–∞–∂–¥–∞–Ω–∞—Ö</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</th>
                    <th>–ü–∞—Å–ø–æ—Ä—Ç</th>
                    <th>–ê–¥—Ä–µ—Å</th>
                    <th>–°—É–¥–∏–º–æ—Å—Ç—å</th>
                    <th>–î–æ–±–∞–≤–∏–ª</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.citizens.map(citizen => `
                    <tr>
                        <td>${citizen.nickname}</td>
                        <td>${citizen.fullName}</td>
                        <td>${citizen.birthDate || '-'}</td>
                        <td>${citizen.passportNumber || '-'}</td>
                        <td>${citizen.address || '-'}</td>
                        <td>${citizen.criminalRecord ? '‚úÖ' : '‚ùå'}</td>
                        <td>${citizen.createdBy}</td>
                        <td>
                            <button class="btn" onclick="editCitizen(${citizen.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteCitizen(${citizen.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
        <div style="margin-top: 10px; color: #666;">
            –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${systemData.citizens.length}
        </div>
    `;
}

function searchCitizens() {
    const searchTerm = document.getElementById('searchCitizens').value.toLowerCase();
    const container = document.getElementById('citizensTableContainer');
    
    const filteredCitizens = systemData.citizens.filter(citizen => 
        citizen.nickname.toLowerCase().includes(searchTerm) ||
        citizen.fullName.toLowerCase().includes(searchTerm)
    );
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</th>
                    <th>–ü–∞—Å–ø–æ—Ä—Ç</th>
                    <th>–ê–¥—Ä–µ—Å</th>
                    <th>–°—É–¥–∏–º–æ—Å—Ç—å</th>
                    <th>–î–æ–±–∞–≤–∏–ª</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${filteredCitizens.map(citizen => `
                    <tr>
                        <td>${citizen.nickname}</td>
                        <td>${citizen.fullName}</td>
                        <td>${citizen.birthDate || '-'}</td>
                        <td>${citizen.passportNumber || '-'}</td>
                        <td>${citizen.address || '-'}</td>
                        <td>${citizen.criminalRecord ? '‚úÖ' : '‚ùå'}</td>
                        <td>${citizen.createdBy}</td>
                        <td>
                            <button class="btn" onclick="editCitizen(${citizen.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteCitizen(${citizen.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
        <div style="margin-top: 10px; color: #666;">
            –ù–∞–π–¥–µ–Ω–æ: ${filteredCitizens.length} –∏–∑ ${systemData.citizens.length}
        </div>
    `;
}

function deleteCitizen(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –∏–∑ –±–∞–∑—ã?')) {
        systemData.citizens = systemData.citizens.filter(c => c.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —É–¥–∞–ª–µ–Ω', 'success');
        }
        loadCitizensTable();
    }
}

// === –ú–û–î–£–õ–¨ –ë–ê–ó–´ –í–û–î–ò–¢–ï–õ–ï–ô ===
function getDriversModule() {
    return `
        <div class="module">
            <h2>üöó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π</h2>
            <button class="btn btn-success" onclick="showDriverForm()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è</button>
            
            <div id="driverFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'} –≤–æ–¥–∏—Ç–µ–ª—è</h3>
                <form onsubmit="saveDriver(event)">
                    <div class="form-group">
                        <label>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞:</label>
                        <select id="driverCitizen" required>
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞</option>
                            ${systemData.citizens.map(c => `<option value="${c.id}">${c.nickname} - ${c.fullName}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–æ–º–µ—Ä –í/–£:</label>
                            <input type="text" id="driverLicenseNumber" required>
                        </div>
                        <div class="form-group">
                            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</label>
                            <input type="text" id="driverCategories" placeholder="A,B,C,D" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã:</label>
                        <textarea id="driverFines" placeholder="–î–∞—Ç–∞, —Å—É–º–º–∞, –Ω–∞—Ä—É—à–µ–Ω–∏–µ..." rows="3"></textarea>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideDriverForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="driversTableContainer"></div>
        </div>
    `;
}

function showDriverForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('driverFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('driverLicenseNumber').value = '';
        document.getElementById('driverCategories').value = '';
        document.getElementById('driverFines').value = '';
    }
}

function hideDriverForm() {
    const form = document.getElementById('driverFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveDriver(event) {
    event.preventDefault();
    
    const citizenId = parseInt(document.getElementById('driverCitizen').value);
    const citizen = systemData.citizens.find(c => c.id === citizenId);
    
    if (!citizen) {
        showNotification('‚ùå –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const driver = {
        id: editingId || Date.now(),
        citizenId: citizenId,
        citizenNickname: citizen.nickname,
        citizenFullName: citizen.fullName,
        licenseNumber: document.getElementById('driverLicenseNumber').value,
        categories: document.getElementById('driverCategories').value,
        fines: document.getElementById('driverFines').value,
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.drivers.findIndex(d => d.id === editingId);
        if (index !== -1) {
            systemData.drivers[index] = driver;
        }
    } else {
        systemData.drivers.push(driver);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
    }
    loadDriversTable();
    hideDriverForm();
}

function editDriver(id) {
    const driver = systemData.drivers.find(d => d.id === id);
    if (driver) {
        editingId = id;
        const form = document.getElementById('driverFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('driverCitizen').value = driver.citizenId;
            document.getElementById('driverLicenseNumber').value = driver.licenseNumber;
            document.getElementById('driverCategories').value = driver.categories;
            document.getElementById('driverFines').value = driver.fines;
        }
    }
}

function loadDriversTable() {
    const container = document.getElementById('driversTableContainer');
    if (!container) return;
    
    if (systemData.drivers.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–ù–æ–º–µ—Ä –í/–£</th>
                    <th>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</th>
                    <th>–®—Ç—Ä–∞—Ñ—ã</th>
                    <th>–î–æ–±–∞–≤–∏–ª</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.drivers.map(driver => `
                    <tr>
                        <td>${driver.citizenNickname}</td>
                        <td>${driver.citizenFullName}</td>
                        <td>${driver.licenseNumber}</td>
                        <td>${driver.categories}</td>
                        <td>${driver.fines || '–Ω–µ—Ç'}</td>
                        <td>${driver.createdBy}</td>
                        <td>
                            <button class="btn" onclick="editDriver(${driver.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteDriver(${driver.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deleteDriver(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã?')) {
        systemData.drivers = systemData.drivers.filter(d => d.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', 'success');
        }
        loadDriversTable();
    }
}

// === –ú–û–î–£–õ–¨ –ú–ò–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –£–ß–ï–¢–ê ===
function getMigrationModule() {
    return `
        <div class="module">
            <h2>üõÇ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—á–µ—Ç –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å</h2>
            <button class="btn btn-success" onclick="showMigrationForm()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</button>
            
            <div id="migrationFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'} –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏</h3>
                <form onsubmit="saveMigrationRecord(event)">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–∏–∫–Ω–µ–π–º:</label>
                            <input type="text" id="migrationNickname" required>
                        </div>
                        <div class="form-group">
                            <label>–§–ò–û:</label>
                            <input type="text" id="migrationFullName" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</label>
                            <input type="text" id="migrationCitizenship" required>
                        </div>
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞:</label>
                            <input type="date" id="migrationEntryDate" required>
                        </div>
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:</label>
                            <input type="date" id="migrationExitDate">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–¶–µ–ª—å –≤–∏–∑–∏—Ç–∞:</label>
                        <input type="text" id="migrationPurpose">
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideMigrationForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="migrationTableContainer"></div>
        </div>
    `;
}

function showMigrationForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('migrationFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('migrationNickname').value = '';
        document.getElementById('migrationFullName').value = '';
        document.getElementById('migrationCitizenship').value = '';
        document.getElementById('migrationEntryDate').value = '';
        document.getElementById('migrationExitDate').value = '';
        document.getElementById('migrationPurpose').value = '';
    }
}

function hideMigrationForm() {
    const form = document.getElementById('migrationFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveMigrationRecord(event) {
    event.preventDefault();
    
    const migration = {
        id: editingId || Date.now(),
        nickname: document.getElementById('migrationNickname').value,
        fullName: document.getElementById('migrationFullName').value,
        citizenship: document.getElementById('migrationCitizenship').value,
        entryDate: document.getElementById('migrationEntryDate').value,
        exitDate: document.getElementById('migrationExitDate').value,
        purpose: document.getElementById('migrationPurpose').value,
        status: document.getElementById('migrationExitDate').value ? '–í—ã–µ—Ö–∞–ª' : '–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.migration.findIndex(m => m.id === editingId);
        if (index !== -1) {
            systemData.migration[index] = migration;
        }
    } else {
        systemData.migration.push(migration);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
    }
    loadMigrationTable();
    hideMigrationForm();
}

function editMigration(id) {
    const migration = systemData.migration.find(m => m.id === id);
    if (migration) {
        editingId = id;
        const form = document.getElementById('migrationFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('migrationNickname').value = migration.nickname;
            document.getElementById('migrationFullName').value = migration.fullName;
            document.getElementById('migrationCitizenship').value = migration.citizenship;
            document.getElementById('migrationEntryDate').value = migration.entryDate;
            document.getElementById('migrationExitDate').value = migration.exitDate;
            document.getElementById('migrationPurpose').value = migration.purpose;
        }
    }
}

function loadMigrationTable() {
    const container = document.getElementById('migrationTableContainer');
    if (!container) return;
    
    if (systemData.migration.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ</th>
                    <th>–í—ä–µ–∑–¥</th>
                    <th>–í—ã–µ–∑–¥</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–¶–µ–ª—å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.migration.map(record => `
                    <tr>
                        <td>${record.nickname}</td>
                        <td>${record.fullName}</td>
                        <td>${record.citizenship}</td>
                        <td>${record.entryDate}</td>
                        <td>${record.exitDate || '-'}</td>
                        <td><span style="color: ${record.status === '–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏' ? 'green' : 'red'}">${record.status}</span></td>
                        <td>${record.purpose || '-'}</td>
                        <td>
                            <button class="btn" onclick="editMigration(${record.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteMigration(${record.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deleteMigration(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å?')) {
        systemData.migration = systemData.migration.filter(m => m.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
        loadMigrationTable();
    }
}

// === –ú–û–î–£–õ–¨ –£–ß–ï–¢–ê –ü–î–ù ===
function getPDNModule() {
    return `
        <div class="module">
            <h2>üë∂ –£—á–µ—Ç –≤ –ü–î–ù (–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–µ–ª–∞–º –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö)</h2>
            <button class="btn btn-success" onclick="showPDNForm()">‚ûï –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —É—á–µ—Ç</button>
            
            <div id="pdnFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞'} –Ω–∞ —É—á–µ—Ç –ü–î–ù</h3>
                <form onsubmit="savePDNRecord(event)">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–∏–∫–Ω–µ–π–º:</label>
                            <input type="text" id="pdnNickname" required>
                        </div>
                        <div class="form-group">
                            <label>–§–ò–û:</label>
                            <input type="text" id="pdnFullName" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                            <input type="date" id="pdnBirthDate" required>
                        </div>
                        <div class="form-group">
                            <label>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:</label>
                            <input type="text" id="pdnSchool" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —É—á–µ—Ç:</label>
                        <textarea id="pdnReason" rows="3" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏:</label>
                        <input type="date" id="pdnRegistrationDate" required>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                        <button type="button" class="btn btn-danger" onclick="hidePDNForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="pdnTableContainer"></div>
        </div>
    `;
}

function showPDNForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('pdnFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('pdnNickname').value = '';
        document.getElementById('pdnFullName').value = '';
        document.getElementById('pdnBirthDate').value = '';
        document.getElementById('pdnSchool').value = '';
        document.getElementById('pdnReason').value = '';
        document.getElementById('pdnRegistrationDate').value = '';
    }
}

function hidePDNForm() {
    const form = document.getElementById('pdnFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function savePDNRecord(event) {
    event.preventDefault();
    
    const pdn = {
        id: editingId || Date.now(),
        nickname: document.getElementById('pdnNickname').value,
        fullName: document.getElementById('pdnFullName').value,
        birthDate: document.getElementById('pdnBirthDate').value,
        school: document.getElementById('pdnSchool').value,
        reason: document.getElementById('pdnReason').value,
        registrationDate: document.getElementById('pdnRegistrationDate').value,
        status: '–ù–∞ —É—á–µ—Ç–µ',
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.pdn.findIndex(p => p.id === editingId);
        if (index !== -1) {
            systemData.pdn[index] = pdn;
        }
    } else {
        systemData.pdn.push(pdn);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –ó–∞–ø–∏—Å—å –ü–î–ù —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
    }
    loadPDNTable();
    hidePDNForm();
}

function editPDN(id) {
    const pdn = systemData.pdn.find(p => p.id === id);
    if (pdn) {
        editingId = id;
        const form = document.getElementById('pdnFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('pdnNickname').value = pdn.nickname;
            document.getElementById('pdnFullName').value = pdn.fullName;
            document.getElementById('pdnBirthDate').value = pdn.birthDate;
            document.getElementById('pdnSchool').value = pdn.school;
            document.getElementById('pdnReason').value = pdn.reason;
            document.getElementById('pdnRegistrationDate').value = pdn.registrationDate;
        }
    }
}

function loadPDNTable() {
    const container = document.getElementById('pdnTableContainer');
    if (!container) return;
    
    if (systemData.pdn.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ü–î–ù</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</th>
                    <th>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ</th>
                    <th>–ü—Ä–∏—á–∏–Ω–∞</th>
                    <th>–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.pdn.map(record => `
                    <tr>
                        <td>${record.nickname}</td>
                        <td>${record.fullName}</td>
                        <td>${record.birthDate}</td>
                        <td>${record.school}</td>
                        <td>${record.reason}</td>
                        <td>${record.registrationDate}</td>
                        <td>${record.status}</td>
                        <td>
                            <button class="btn" onclick="editPDN(${record.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deletePDN(${record.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deletePDN(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ —É—á–µ—Ç–∞ –ü–î–ù?')) {
        systemData.pdn = systemData.pdn.filter(p => p.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ó–∞–ø–∏—Å—å –ü–î–ù —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
        loadPDNTable();
    }
}

// === –ú–û–î–£–õ–¨ –û–ü–ï–†–ê–¢–ò–í–ù–û–ì–û –£–ß–ï–¢–ê ===
function getOperationalModule() {
    return `
        <div class="module">
            <h2>üìã –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —É—á–µ—Ç (–ë–∞–∑–∞ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤)</h2>
            <button class="btn btn-success" onclick="showOperationalForm()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</button>
            
            <div id="operationalFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'} –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —É—á–µ—Ç</h3>
                <form onsubmit="saveOperationalRecord(event)">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–∏–∫–Ω–µ–π–º:</label>
                            <input type="text" id="operationalNickname" required>
                        </div>
                        <div class="form-group">
                            <label>–§–ò–û:</label>
                            <input type="text" id="operationalFullName" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                            <input type="date" id="operationalBirthDate">
                        </div>
                        <div class="form-group">
                            <label>–ö–ª–∏—á–∫–∞/–ü—Ä–æ–∑–≤–∏—â–µ:</label>
                            <input type="text" id="operationalAlias">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–ü—Ä–µ—Å—Ç—É–ø–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</label>
                        <input type="text" id="operationalSpecialization" required>
                    </div>
                    <div class="form-group">
                        <label>–ü—Ä–∏–º–µ—Ç—ã:</label>
                        <textarea id="operationalDescription" rows="2"></textarea>
                    </div>
                    <div class="form-group">
                        <label>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ:</label>
                        <input type="text" id="operationalLastLocation">
                    </div>
                    <div class="form-group">
                        <label>–°—Ç–∞—Ç—É—Å:</label>
                        <select id="operationalStatus">
                            <option value="–ê–∫—Ç–∏–≤–µ–Ω">–ê–∫—Ç–∏–≤–µ–Ω</option>
                            <option value="–ê—Ä–µ—Å—Ç–æ–≤–∞–Ω">–ê—Ä–µ—Å—Ç–æ–≤–∞–Ω</option>
                            <option value="–í —Ä–æ–∑—ã—Å–∫–µ">–í —Ä–æ–∑—ã—Å–∫–µ</option>
                            <option value="–£—Å–ª–æ–≤–Ω–æ-–¥–æ—Å—Ä–æ—á–Ω–æ">–£—Å–ª–æ–≤–Ω–æ-–¥–æ—Å—Ä–æ—á–Ω–æ</option>
                        </select>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideOperationalForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="operationalTableContainer"></div>
        </div>
    `;
}

function showOperationalForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('operationalFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('operationalNickname').value = '';
        document.getElementById('operationalFullName').value = '';
        document.getElementById('operationalBirthDate').value = '';
        document.getElementById('operationalAlias').value = '';
        document.getElementById('operationalSpecialization').value = '';
        document.getElementById('operationalDescription').value = '';
        document.getElementById('operationalLastLocation').value = '';
        document.getElementById('operationalStatus').value = '–ê–∫—Ç–∏–≤–µ–Ω';
    }
}

function hideOperationalForm() {
    const form = document.getElementById('operationalFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveOperationalRecord(event) {
    event.preventDefault();
    
    const operational = {
        id: editingId || Date.now(),
        nickname: document.getElementById('operationalNickname').value,
        fullName: document.getElementById('operationalFullName').value,
        birthDate: document.getElementById('operationalBirthDate').value,
        alias: document.getElementById('operationalAlias').value,
        specialization: document.getElementById('operationalSpecialization').value,
        description: document.getElementById('operationalDescription').value,
        lastLocation: document.getElementById('operationalLastLocation').value,
        status: document.getElementById('operationalStatus').value,
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.operational.findIndex(o => o.id === editingId);
        if (index !== -1) {
            systemData.operational[index] = operational;
        }
    } else {
        systemData.operational.push(operational);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É—á–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
    }
    loadOperationalTable();
    hideOperationalForm();
}

function editOperational(id) {
    const operational = systemData.operational.find(o => o.id === id);
    if (operational) {
        editingId = id;
        const form = document.getElementById('operationalFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('operationalNickname').value = operational.nickname;
            document.getElementById('operationalFullName').value = operational.fullName;
            document.getElementById('operationalBirthDate').value = operational.birthDate;
            document.getElementById('operationalAlias').value = operational.alias;
            document.getElementById('operationalSpecialization').value = operational.specialization;
            document.getElementById('operationalDescription').value = operational.description;
            document.getElementById('operationalLastLocation').value = operational.lastLocation;
            document.getElementById('operationalStatus').value = operational.status;
        }
    }
}

function loadOperationalTable() {
    const container = document.getElementById('operationalTableContainer');
    if (!container) return;
    
    if (systemData.operational.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É—á–µ—Ç–∞</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–ö–ª–∏—á–∫–∞</th>
                    <th>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</th>
                    <th>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.operational.map(record => `
                    <tr>
                        <td>${record.nickname}</td>
                        <td>${record.fullName}</td>
                        <td>${record.alias || '-'}</td>
                        <td>${record.specialization}</td>
                        <td>${record.lastLocation || '-'}</td>
                        <td>${record.status}</td>
                        <td>
                            <button class="btn" onclick="editOperational(${record.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteOperational(${record.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deleteOperational(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É—á–µ—Ç–∞?')) {
        systemData.operational = systemData.operational.filter(o => o.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É—á–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
        loadOperationalTable();
    }
}

// === –ú–û–î–£–õ–¨ –ö–£–°–ü ===
function getCUSPModule() {
    return `
        <div class="module">
            <h2>üìù –ö–£–°–ü (–ö–Ω–∏–≥–∞ —É—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö)</h2>
            <button class="btn btn-success" onclick="showCUSPForm()">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
            
            <div id="cuspFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'} —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ö–£–°–ü</h3>
                <form onsubmit="saveCUSPRecord(event)">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ó–∞—è–≤–∏—Ç–µ–ª—å (–§–ò–û):</label>
                            <input type="text" id="cuspApplicant" required>
                        </div>
                        <div class="form-group">
                            <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</label>
                            <input type="text" id="cuspContacts" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–°—É—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è:</label>
                        <textarea id="cuspStatement" rows="4" required></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:</label>
                            <input type="text" id="cuspResponsible" value="${currentUser.fullName}" readonly>
                        </div>
                        <div class="form-group">
                            <label>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</label>
                            <input type="datetime-local" id="cuspDateTime" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:</label>
                        <select id="cuspStatus">
                            <option value="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ</option>
                            <option value="–í —Ä–∞–±–æ—Ç–µ">–í —Ä–∞–±–æ—Ç–µ</option>
                            <option value="–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –°–û">–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –°–û</option>
                            <option value="–ó–∞–∫—Ä—ã—Ç–æ">–ó–∞–∫—Ä—ã—Ç–æ</option>
                        </select>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideCUSPForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="cuspTableContainer"></div>
        </div>
    `;
}

function showCUSPForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('cuspFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('cuspApplicant').value = '';
        document.getElementById('cuspContacts').value = '';
        document.getElementById('cuspStatement').value = '';
        document.getElementById('cuspDateTime').value = new Date().toISOString().slice(0, 16);
        document.getElementById('cuspStatus').value = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ';
    }
}

function hideCUSPForm() {
    const form = document.getElementById('cuspFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveCUSPRecord(event) {
    event.preventDefault();
    
    const cusp = {
        id: editingId || Date.now(),
        applicant: document.getElementById('cuspApplicant').value,
        contacts: document.getElementById('cuspContacts').value,
        statement: document.getElementById('cuspStatement').value,
        responsible: document.getElementById('cuspResponsible').value,
        dateTime: document.getElementById('cuspDateTime').value,
        status: document.getElementById('cuspStatus').value,
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.cusp.findIndex(c => c.id === editingId);
        if (index !== -1) {
            systemData.cusp[index] = cusp;
        }
    } else {
        systemData.cusp.push(cusp);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –ó–∞–ø–∏—Å—å –ö–£–°–ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
    }
    loadCUSPTable();
    hideCUSPForm();
}

function editCUSP(id) {
    const cusp = systemData.cusp.find(c => c.id === id);
    if (cusp) {
        editingId = id;
        const form = document.getElementById('cuspFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('cuspApplicant').value = cusp.applicant;
            document.getElementById('cuspContacts').value = cusp.contacts;
            document.getElementById('cuspStatement').value = cusp.statement;
            document.getElementById('cuspResponsible').value = cusp.responsible;
            document.getElementById('cuspDateTime').value = cusp.dateTime;
            document.getElementById('cuspStatus').value = cusp.status;
        }
    }
}

function loadCUSPTable() {
    const container = document.getElementById('cuspTableContainer');
    if (!container) return;
    
    if (systemData.cusp.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ö–£–°–ü</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>‚Ññ</th>
                    <th>–ó–∞—è–≤–∏—Ç–µ–ª—å</th>
                    <th>–ö–æ–Ω—Ç–∞–∫—Ç—ã</th>
                    <th>–°—É—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è</th>
                    <th>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</th>
                    <th>–î–∞—Ç–∞/–≤—Ä–µ–º—è</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.cusp.map((record, index) => `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${record.applicant}</td>
                        <td>${record.contacts}</td>
                        <td>${record.statement.length > 50 ? record.statement.substring(0, 50) + '...' : record.statement}</td>
                        <td>${record.responsible}</td>
                        <td>${new Date(record.dateTime).toLocaleString()}</td>
                        <td>${record.status}</td>
                        <td>
                            <button class="btn" onclick="editCUSP(${record.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteCUSP(${record.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deleteCUSP(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ö–£–°–ü?')) {
        systemData.cusp = systemData.cusp.filter(c => c.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ó–∞–ø–∏—Å—å –ö–£–°–ü —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
        loadCUSPTable();
    }
}

// === –ú–û–î–£–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–• –ü–†–û–¢–û–ö–û–õ–û–í ===
function getAdminProtocolsModule() {
    return `
        <div class="module">
            <h2>üìÑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã</h2>
            <button class="btn btn-success" onclick="showAdminProtocolForm()">‚ûï –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª</button>
            
            <div id="adminProtocolFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</h3>
                <form onsubmit="saveAdminProtocol(event)">
                    <div class="form-group">
                        <label>–ù–∞—Ä—É—à–∏—Ç–µ–ª—å (–§–ò–û):</label>
                        <input type="text" id="protocolViolator" required>
                    </div>
                    <div class="form-group">
                        <label>–ù–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:</label>
                        <input type="text" id="protocolViolatorNickname">
                    </div>
                    <div class="form-group">
                        <label>–°—Ç–∞—Ç—å—è –ö–æ–ê–ü:</label>
                        <input type="text" id="protocolArticle" required placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 12.9 —á.1">
                    </div>
                    <div class="form-group">
                        <label>–û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:</label>
                        <textarea id="protocolCircumstances" rows="3" required></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ú–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è:</label>
                            <input type="text" id="protocolLocation" required>
                        </div>
                        <div class="form-group">
                            <label>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</label>
                            <input type="datetime-local" id="protocolDateTime" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–°–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—å:</label>
                        <input type="text" id="protocolAuthor" value="${currentUser.fullName}" readonly>
                    </div>
                    <div class="form-group">
                        <label>–°—Ç–∞—Ç—É—Å:</label>
                        <select id="protocolStatus">
                            <option value="–°–æ—Å—Ç–∞–≤–ª–µ–Ω">–°–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
                            <option value="–ü–µ—Ä–µ–¥–∞–Ω –≤ —Å—É–¥">–ü–µ—Ä–µ–¥–∞–Ω –≤ —Å—É–¥</option>
                            <option value="–ò—Å–ø–æ–ª–Ω–µ–Ω">–ò—Å–ø–æ–ª–Ω–µ–Ω</option>
                        </select>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideAdminProtocolForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="adminProtocolsTableContainer"></div>
        </div>
    `;
}

function showAdminProtocolForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('adminProtocolFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('protocolViolator').value = '';
        document.getElementById('protocolViolatorNickname').value = '';
        document.getElementById('protocolArticle').value = '';
        document.getElementById('protocolCircumstances').value = '';
        document.getElementById('protocolLocation').value = '';
        document.getElementById('protocolDateTime').value = new Date().toISOString().slice(0, 16);
        document.getElementById('protocolStatus').value = '–°–æ—Å—Ç–∞–≤–ª–µ–Ω';
    }
}

function hideAdminProtocolForm() {
    const form = document.getElementById('adminProtocolFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveAdminProtocol(event) {
    event.preventDefault();
    
    const protocol = {
        id: editingId || Date.now(),
        violator: document.getElementById('protocolViolator').value,
        violatorNickname: document.getElementById('protocolViolatorNickname').value,
        article: document.getElementById('protocolArticle').value,
        circumstances: document.getElementById('protocolCircumstances').value,
        location: document.getElementById('protocolLocation').value,
        dateTime: document.getElementById('protocolDateTime').value,
        author: document.getElementById('protocolAuthor').value,
        status: document.getElementById('protocolStatus').value,
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.adminProtocols.findIndex(p => p.id === editingId);
        if (index !== -1) {
            systemData.adminProtocols[index] = protocol;
        }
    } else {
        systemData.adminProtocols.push(protocol);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
    }
    loadAdminProtocolsTable();
    hideAdminProtocolForm();
}

function editAdminProtocol(id) {
    const protocol = systemData.adminProtocols.find(p => p.id === id);
    if (protocol) {
        editingId = id;
        const form = document.getElementById('adminProtocolFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('protocolViolator').value = protocol.violator;
            document.getElementById('protocolViolatorNickname').value = protocol.violatorNickname;
            document.getElementById('protocolArticle').value = protocol.article;
            document.getElementById('protocolCircumstances').value = protocol.circumstances;
            document.getElementById('protocolLocation').value = protocol.location;
            document.getElementById('protocolDateTime').value = protocol.dateTime;
            document.getElementById('protocolStatus').value = protocol.status;
        }
    }
}

function loadAdminProtocolsTable() {
    const container = document.getElementById('adminProtocolsTableContainer');
    if (!container) return;
    
    if (systemData.adminProtocols.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>‚Ññ</th>
                    <th>–ù–∞—Ä—É—à–∏—Ç–µ–ª—å</th>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–°—Ç–∞—Ç—å—è</th>
                    <th>–ú–µ—Å—Ç–æ</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.adminProtocols.map((protocol, index) => `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${protocol.violator}</td>
                        <td>${protocol.violatorNickname || '-'}</td>
                        <td>${protocol.article}</td>
                        <td>${protocol.location}</td>
                        <td>${new Date(protocol.dateTime).toLocaleString()}</td>
                        <td>${protocol.status}</td>
                        <td>
                            <button class="btn" onclick="editAdminProtocol(${protocol.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteAdminProtocol(${protocol.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deleteAdminProtocol(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª?')) {
        systemData.adminProtocols = systemData.adminProtocols.filter(p => p.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —É–¥–∞–ª–µ–Ω', 'success');
        }
        loadAdminProtocolsTable();
    }
}

// === –ú–û–î–£–õ–¨ –£–ì–û–õ–û–í–ù–´–• –î–ï–õ ===
function getCriminalCasesModule() {
    return `
        <div class="module">
            <h2>üîç –£–≥–æ–ª–æ–≤–Ω—ã–µ –¥–µ–ª–∞</h2>
            <button class="btn btn-success" onclick="showCriminalCaseForm()">‚ûï –í–æ–∑–±—É–¥–∏—Ç—å –¥–µ–ª–æ</button>
            
            <div id="criminalCaseFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ'} —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –¥–µ–ª–∞</h3>
                <form onsubmit="saveCriminalCase(event)">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–æ–º–µ—Ä –¥–µ–ª–∞:</label>
                            <input type="text" id="caseNumber" required placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 12345">
                        </div>
                        <div class="form-group">
                            <label>–°—Ç–∞—Ç—å—è –£–ö:</label>
                            <input type="text" id="caseArticle" required placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 158 –£–ö –†–§">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ/–û–±–≤–∏–Ω—è–µ–º—ã–µ:</label>
                        <textarea id="caseSuspects" rows="2" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>–û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞:</label>
                        <textarea id="caseCircumstances" rows="3" required></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å:</label>
                            <input type="text" id="caseInvestigator" value="${currentUser.fullName}" readonly>
                        </div>
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è:</label>
                            <input type="date" id="caseStartDate" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–°—Ç–∞—Ç—É—Å:</label>
                        <select id="caseStatus">
                            <option value="–í–æ–∑–±—É–∂–¥–µ–Ω–æ">–í–æ–∑–±—É–∂–¥–µ–Ω–æ</option>
                            <option value="–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ">–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</option>
                            <option value="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</option>
                            <option value="–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å—É–¥">–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å—É–¥</option>
                            <option value="–ó–∞–∫—Ä—ã—Ç–æ">–ó–∞–∫—Ä—ã—Ç–æ</option>
                        </select>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–ª–æ'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideCriminalCaseForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="criminalCasesTableContainer"></div>
        </div>
    `;
}

function showCriminalCaseForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('criminalCaseFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('caseNumber').value = '';
        document.getElementById('caseArticle').value = '';
        document.getElementById('caseSuspects').value = '';
        document.getElementById('caseCircumstances').value = '';
        document.getElementById('caseStartDate').value = new Date().toISOString().split('T')[0];
        document.getElementById('caseStatus').value = '–í–æ–∑–±—É–∂–¥–µ–Ω–æ';
    }
}

function hideCriminalCaseForm() {
    const form = document.getElementById('criminalCaseFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveCriminalCase(event) {
    event.preventDefault();
    
    const criminalCase = {
        id: editingId || Date.now(),
        number: document.getElementById('caseNumber').value,
        article: document.getElementById('caseArticle').value,
        suspects: document.getElementById('caseSuspects').value,
        circumstances: document.getElementById('caseCircumstances').value,
        investigator: document.getElementById('caseInvestigator').value,
        startDate: document.getElementById('caseStartDate').value,
        status: document.getElementById('caseStatus').value,
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.criminalCases.findIndex(c => c.id === editingId);
        if (index !== -1) {
            systemData.criminalCases[index] = criminalCase;
        }
    } else {
        systemData.criminalCases.push(criminalCase);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –£–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', 'success');
    }
    loadCriminalCasesTable();
    hideCriminalCaseForm();
}

function editCriminalCase(id) {
    const criminalCase = systemData.criminalCases.find(c => c.id === id);
    if (criminalCase) {
        editingId = id;
        const form = document.getElementById('criminalCaseFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('caseNumber').value = criminalCase.number;
            document.getElementById('caseArticle').value = criminalCase.article;
            document.getElementById('caseSuspects').value = criminalCase.suspects;
            document.getElementById('caseCircumstances').value = criminalCase.circumstances;
            document.getElementById('caseInvestigator').value = criminalCase.investigator;
            document.getElementById('caseStartDate').value = criminalCase.startDate;
            document.getElementById('caseStatus').value = criminalCase.status;
        }
    }
}

function loadCriminalCasesTable() {
    const container = document.getElementById('criminalCasesTableContainer');
    if (!container) return;
    
    if (systemData.criminalCases.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç —É–≥–æ–ª–æ–≤–Ω—ã—Ö –¥–µ–ª</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>‚Ññ –¥–µ–ª–∞</th>
                    <th>–°—Ç–∞—Ç—å—è</th>
                    <th>–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ</th>
                    <th>–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å</th>
                    <th>–î–∞—Ç–∞ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.criminalCases.map(caseItem => `
                    <tr>
                        <td>${caseItem.number}</td>
                        <td>${caseItem.article}</td>
                        <td>${caseItem.suspects.length > 30 ? caseItem.suspects.substring(0, 30) + '...' : caseItem.suspects}</td>
                        <td>${caseItem.investigator}</td>
                        <td>${caseItem.startDate}</td>
                        <td>${caseItem.status}</td>
                        <td>
                            <button class="btn" onclick="editCriminalCase(${caseItem.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteCriminalCase(${caseItem.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deleteCriminalCase(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —É–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ?')) {
        systemData.criminalCases = systemData.criminalCases.filter(c => c.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –£–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ —É–¥–∞–ª–µ–Ω–æ', 'success');
        }
        loadCriminalCasesTable();
    }
}

// === –ú–û–î–£–õ–¨ –†–û–ó–´–°–ö–ê ===
function getWantedModule() {
    return `
        <div class="module">
            <h2>üïµÔ∏è –†–æ–∑—ã—Å–∫</h2>
            <button class="btn btn-success" onclick="showWantedForm()">‚ûï –û–±—ä—è–≤–∏—Ç—å –≤ —Ä–æ–∑—ã—Å–∫</button>
            
            <div id="wantedFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–û–±—ä—è–≤–ª–µ–Ω–∏–µ'} –≤ —Ä–æ–∑—ã—Å–∫</h3>
                <form onsubmit="saveWantedRecord(event)">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–∏–∫–Ω–µ–π–º:</label>
                            <input type="text" id="wantedNickname" required>
                        </div>
                        <div class="form-group">
                            <label>–§–ò–û:</label>
                            <input type="text" id="wantedFullName" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–û—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã—Å–∫–∞:</label>
                        <textarea id="wantedReason" rows="3" required></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–£—Ä–æ–≤–µ–Ω—å —Ä–æ–∑—ã—Å–∫–∞:</label>
                            <select id="wantedLevel" required>
                                <option value="–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π">–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π</option>
                                <option value="–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π">–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π</option>
                                <option value="–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π">–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</label>
                            <input type="date" id="wantedDate" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Ä–æ–∑—ã—Å–∫–∞:</label>
                        <input type="text" id="wantedInitiator" value="${currentUser.fullName}" readonly>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–û–±—ä—è–≤–∏—Ç—å –≤ —Ä–æ–∑—ã—Å–∫'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideWantedForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div class="tabs">
                <div class="tab active" onclick="filterWanted('all')">–í—Å–µ</div>
                <div class="tab" onclick="filterWanted('–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π')">–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π</div>
                <div class="tab" onclick="filterWanted('–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π')">–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π</div>
                <div class="tab" onclick="filterWanted('–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π')">–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π</div>
            </div>
            
            <div id="wantedTableContainer"></div>
        </div>
    `;
}

function showWantedForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('wantedFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('wantedNickname').value = '';
        document.getElementById('wantedFullName').value = '';
        document.getElementById('wantedReason').value = '';
        document.getElementById('wantedLevel').value = '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π';
        document.getElementById('wantedDate').value = new Date().toISOString().split('T')[0];
    }
}

function hideWantedForm() {
    const form = document.getElementById('wantedFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveWantedRecord(event) {
    event.preventDefault();
    
    const wanted = {
        id: editingId || Date.now(),
        nickname: document.getElementById('wantedNickname').value,
        fullName: document.getElementById('wantedFullName').value,
        reason: document.getElementById('wantedReason').value,
        level: document.getElementById('wantedLevel').value,
        date: document.getElementById('wantedDate').value,
        initiator: document.getElementById('wantedInitiator').value,
        status: '–í —Ä–æ–∑—ã—Å–∫–µ',
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.wanted.findIndex(w => w.id === editingId);
        if (index !== -1) {
            systemData.wanted[index] = wanted;
        }
    } else {
        systemData.wanted.push(wanted);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –†–æ–∑—ã—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω', 'success');
    }
    loadWantedTable();
    hideWantedForm();
}

function editWanted(id) {
    const wanted = systemData.wanted.find(w => w.id === id);
    if (wanted) {
        editingId = id;
        const form = document.getElementById('wantedFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('wantedNickname').value = wanted.nickname;
            document.getElementById('wantedFullName').value = wanted.fullName;
            document.getElementById('wantedReason').value = wanted.reason;
            document.getElementById('wantedLevel').value = wanted.level;
            document.getElementById('wantedDate').value = wanted.date;
        }
    }
}

function filterWanted(level) {
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    event.target.classList.add('active');
    
    const container = document.getElementById('wantedTableContainer');
    const filtered = level === 'all' ? systemData.wanted : systemData.wanted.filter(w => w.level === level);
    
    if (filtered.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Ä–æ–∑—ã—Å–∫–∞</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–û—Å–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th>–£—Ä–æ–≤–µ–Ω—å</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${filtered.map(wanted => `
                    <tr>
                        <td>${wanted.nickname}</td>
                        <td>${wanted.fullName}</td>
                        <td>${wanted.reason.length > 50 ? wanted.reason.substring(0, 50) + '...' : wanted.reason}</td>
                        <td><span style="color: ${
                            wanted.level === '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π' ? 'red' : 
                            wanted.level === '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π' ? 'orange' : 'blue'
                        }">${wanted.level}</span></td>
                        <td>${wanted.date}</td>
                        <td>${wanted.initiator}</td>
                        <td>${wanted.status}</td>
                        <td>
                            <button class="btn" onclick="editWanted(${wanted.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteWanted(${wanted.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function loadWantedTable() {
    const container = document.getElementById('wantedTableContainer');
    if (!container) return;
    
    if (systemData.wanted.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Ä–æ–∑—ã—Å–∫–∞</div>';
        return;
    }
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–û—Å–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th>–£—Ä–æ–≤–µ–Ω—å</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.wanted.map(wanted => `
                    <tr>
                        <td>${wanted.nickname}</td>
                        <td>${wanted.fullName}</td>
                        <td>${wanted.reason.length > 50 ? wanted.reason.substring(0, 50) + '...' : wanted.reason}</td>
                        <td><span style="color: ${
                            wanted.level === '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π' ? 'red' : 
                            wanted.level === '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π' ? 'orange' : 'blue'
                        }">${wanted.level}</span></td>
                        <td>${wanted.date}</td>
                        <td>${wanted.initiator}</td>
                        <td>${wanted.status}</td>
                        <td>
                            <button class="btn" onclick="editWanted(${wanted.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteWanted(${wanted.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deleteWanted(id) {
    if (confirm('–°–Ω—è—Ç—å —Å —Ä–æ–∑—ã—Å–∫–∞?')) {
        systemData.wanted = systemData.wanted.filter(w => w.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –†–æ–∑—ã—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω', 'success');
        }
        loadWantedTable();
    }
}

// === –ú–û–î–£–õ–¨ –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–û–ô –¢–ê–ô–ù–´ ===
function getStateSecretModule() {
    const allowedPositions = ['–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –£–°–ë', '–û–ø–µ—Ä—É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–æ–∑—ã—Å–∫–∞', '–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞', '–ù–∞—á–∞–ª—å–Ω–∏–∫ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'];
    
    if (!allowedPositions.includes(currentUser.position)) {
        return `
            <div class="module state-secret">
                <h2>üîê –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–∞–π–Ω–∞</h2>
                <div style="text-align: center; padding: 50px;">
                    <h3 style="color: #e74c3c;">üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù</h3>
                    <p>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω–æ–º–æ—á–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É</p>
                    <p><strong>–¢—Ä–µ–±—É–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> –£–°–ë, –£–≥–æ–ª–æ–≤–Ω—ã–π —Ä–æ–∑—ã—Å–∫, –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ù–∞—á–∞–ª—å–Ω–∏–∫</p>
                </div>
            </div>
        `;
    }

    return `
        <div class="module state-secret">
            <h2>üîê –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–∞–π–Ω–∞</h2>
            <div class="tabs">
                <div class="tab active" onclick="showStateSecretTab('terroristOrgs')">–¢–µ—Ä—Ä. –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</div>
                <div class="tab" onclick="showStateSecretTab('terrorists')">–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã</div>
                <div class="tab" onclick="showStateSecretTab('extremists')">–≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—ã</div>
                <div class="tab" onclick="showStateSecretTab('unwanted')">–ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏—Ü–∞</div>
                <div class="tab" onclick="showStateSecretTab('foreignAgents')">–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã</div>
            </div>
            
            <div id="stateSecretContent">
                <div class="tab-content active" id="terroristOrgsTab">
                    <h3>üè¥ –¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</h3>
                    <div class="form-group">
                        <input type="text" id="newTerroristOrg" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏">
                        <button class="btn" onclick="addTerroristOrg()">–î–æ–±–∞–≤–∏—Ç—å</button>
                    </div>
                    <div id="terroristOrgsList"></div>
                </div>
                
                <div class="tab-content" id="terroristsTab">
                    <h3>üë§ –¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã</h3>
                    <div class="form-group">
                        <input type="text" id="newTerrorist" placeholder="–§–ò–û —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∞">
                        <button class="btn" onclick="addTerrorist()">–î–æ–±–∞–≤–∏—Ç—å</button>
                    </div>
                    <div id="terroristsList"></div>
                </div>
                
                <div class="tab-content" id="extremistsTab">
                    <h3>‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—ã</h3>
                    <div class="form-group">
                        <input type="text" id="newExtremist" placeholder="–§–ò–û —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç–∞">
                        <button class="btn" onclick="addExtremist()">–î–æ–±–∞–≤–∏—Ç—å</button>
                    </div>
                    <div id="extremistsList"></div>
                </div>
                
                <div class="tab-content" id="unwantedTab">
                    <h3>üö´ –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏—Ü–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</h3>
                    <div class="form-group">
                        <input type="text" id="newUnwanted" placeholder="–§–ò–û –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏">
                        <button class="btn" onclick="addUnwanted()">–î–æ–±–∞–≤–∏—Ç—å</button>
                    </div>
                    <div id="unwantedList"></div>
                </div>
                
                <div class="tab-content" id="foreignAgentsTab">
                    <h3>üåç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã</h3>
                    <div class="form-group">
                        <input type="text" id="newForeignAgent" placeholder="–§–ò–û –∞–≥–µ–Ω—Ç–∞">
                        <button class="btn" onclick="addForeignAgent()">–î–æ–±–∞–≤–∏—Ç—å</button>
                    </div>
                    <div id="foreignAgentsList"></div>
                </div>
            </div>
        </div>
    `;
}

function showStateSecretTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    
    document.getElementById(tabName + 'Tab').classList.add('active');
    event.target.classList.add('active');
    
    loadStateSecretData();
}

function addTerroristOrg() {
    const name = document.getElementById('newTerroristOrg').value;
    if (name) {
        systemData.stateSecret.terroristOrgs.push({
            id: Date.now(),
            name: name,
            addedBy: currentUser.nickname,
            date: new Date().toLocaleString()
        });
        saveAllData();
        loadStateSecretData();
        document.getElementById('newTerroristOrg').value = '';
        showNotification('‚úÖ –¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    }
}

function addTerrorist() {
    const name = document.getElementById('newTerrorist').value;
    if (name) {
        systemData.stateSecret.terrorists.push({
            id: Date.now(),
            name: name,
            addedBy: currentUser.nickname,
            date: new Date().toLocaleString()
        });
        saveAllData();
        loadStateSecretData();
        document.getElementById('newTerrorist').value = '';
        showNotification('‚úÖ –¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
    }
}

function addExtremist() {
    const name = document.getElementById('newExtremist').value;
    if (name) {
        systemData.stateSecret.extremists.push({
            id: Date.now(),
            name: name,
            addedBy: currentUser.nickname,
            date: new Date().toLocaleString()
        });
        saveAllData();
        loadStateSecretData();
        document.getElementById('newExtremist').value = '';
        showNotification('‚úÖ –≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
    }
}

function addUnwanted() {
    const name = document.getElementById('newUnwanted').value;
    if (name) {
        systemData.stateSecret.unwanted.push({
            id: Date.now(),
            name: name,
            addedBy: currentUser.nickname,
            date: new Date().toLocaleString()
        });
        saveAllData();
        loadStateSecretData();
        document.getElementById('newUnwanted').value = '';
        showNotification('‚úÖ –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ –ª–∏—Ü–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'success');
    }
}

function addForeignAgent() {
    const name = document.getElementById('newForeignAgent').value;
    if (name) {
        systemData.stateSecret.foreignAgents.push({
            id: Date.now(),
            name: name,
            addedBy: currentUser.nickname,
            date: new Date().toLocaleString()
        });
        saveAllData();
        loadStateSecretData();
        document.getElementById('newForeignAgent').value = '';
        showNotification('‚úÖ –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
    }
}

function loadStateSecretData() {
    // –¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (document.getElementById('terroristOrgsList')) {
        document.getElementById('terroristOrgsList').innerHTML = 
            systemData.stateSecret.terroristOrgs.map(org => 
                `<div style="padding: 8px; border-bottom: 1px solid #444; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>${org.name}</strong>
                        <div style="font-size: 12px; color: #ccc;">–î–æ–±–∞–≤–∏–ª: ${org.addedBy} | ${org.date}</div>
                    </div>
                    <button class="btn btn-danger" style="padding: 2px 8px; font-size: 12px;" onclick="deleteStateSecretItem('terroristOrgs', ${org.id})">üóëÔ∏è</button>
                </div>`
            ).join('') || '<div style="padding: 8px; color: #ccc;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>';
    }
    
    // –¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã
    if (document.getElementById('terroristsList')) {
        document.getElementById('terroristsList').innerHTML = 
            systemData.stateSecret.terrorists.map(terrorist => 
                `<div style="padding: 8px; border-bottom: 1px solid #444; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>${terrorist.name}</strong>
                        <div style="font-size: 12px; color: #ccc;">–î–æ–±–∞–≤–∏–ª: ${terrorist.addedBy} | ${terrorist.date}</div>
                    </div>
                    <button class="btn btn-danger" style="padding: 2px 8px; font-size: 12px;" onclick="deleteStateSecretItem('terrorists', ${terrorist.id})">üóëÔ∏è</button>
                </div>`
            ).join('') || '<div style="padding: 8px; color: #ccc;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>';
    }
    
    // –≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—ã
    if (document.getElementById('extremistsList')) {
        document.getElementById('extremistsList').innerHTML = 
            systemData.stateSecret.extremists.map(extremist => 
                `<div style="padding: 8px; border-bottom: 1px solid #444; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>${extremist.name}</strong>
                        <div style="font-size: 12px; color: #ccc;">–î–æ–±–∞–≤–∏–ª: ${extremist.addedBy} | ${extremist.date}</div>
                    </div>
                    <button class="btn btn-danger" style="padding: 2px 8px; font-size: 12px;" onclick="deleteStateSecretItem('extremists', ${extremist.id})">üóëÔ∏è</button>
                </div>`
            ).join('') || '<div style="padding: 8px; color: #ccc;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>';
    }
    
    // –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏—Ü–∞
    if (document.getElementById('unwantedList')) {
        document.getElementById('unwantedList').innerHTML = 
            systemData.stateSecret.unwanted.map(item => 
                `<div style="padding: 8px; border-bottom: 1px solid #444; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>${item.name}</strong>
                        <div style="font-size: 12px; color: #ccc;">–î–æ–±–∞–≤–∏–ª: ${item.addedBy} | ${item.date}</div>
                    </div>
                    <button class="btn btn-danger" style="padding: 2px 8px; font-size: 12px;" onclick="deleteStateSecretItem('unwanted', ${item.id})">üóëÔ∏è</button>
                </div>`
            ).join('') || '<div style="padding: 8px; color: #ccc;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>';
    }
    
    // –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
    if (document.getElementById('foreignAgentsList')) {
        document.getElementById('foreignAgentsList').innerHTML = 
            systemData.stateSecret.foreignAgents.map(agent => 
                `<div style="padding: 8px; border-bottom: 1px solid #444; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>${agent.name}</strong>
                        <div style="font-size: 12px; color: #ccc;">–î–æ–±–∞–≤–∏–ª: ${agent.addedBy} | ${agent.date}</div>
                    </div>
                    <button class="btn btn-danger" style="padding: 2px 8px; font-size: 12px;" onclick="deleteStateSecretItem('foreignAgents', ${agent.id})">üóëÔ∏è</button>
                </div>`
            ).join('') || '<div style="padding: 8px; color: #ccc;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>';
    }
}

function deleteStateSecretItem(type, id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–∞–π–Ω—ã?')) {
        systemData.stateSecret[type] = systemData.stateSecret[type].filter(item => item.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–∞–π–Ω—ã', 'success');
        }
        loadStateSecretData();
    }
}

// === –ú–û–î–£–õ–¨ –ë–ê–ó–´ –î–û–õ–ñ–ù–ò–ö–û–í ===
function getDebtorsModule() {
    return `
        <div class="module">
            <h2>üí≥ –ë–∞–∑–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤</h2>
            <button class="btn btn-success" onclick="showDebtorForm()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–∞</button>
            
            <div id="debtorFormContainer" style="display: none; margin-top: 20px; padding: 20px; background: #f8f9fa; border-radius: 5px;">
                <h3>${editingId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'} –¥–æ–ª–∂–Ω–∏–∫–∞</h3>
                <form onsubmit="saveDebtor(event)">
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ù–∏–∫–Ω–µ–π–º:</label>
                            <input type="text" id="debtorNickname" required>
                        </div>
                        <div class="form-group">
                            <label>–§–ò–û:</label>
                            <input type="text" id="debtorFullName" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>–¢–∏–ø –¥–æ–ª–≥–∞:</label>
                            <select id="debtType" required>
                                <option value="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —à—Ç—Ä–∞—Ñ">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —à—Ç—Ä–∞—Ñ</option>
                                <option value="–ù–∞–ª–æ–≥–∏">–ù–∞–ª–æ–≥–∏</option>
                                <option value="–ê–ª–∏–º–µ–Ω—Ç—ã">–ê–ª–∏–º–µ–Ω—Ç—ã</option>
                                <option value="–ö—Ä–µ–¥–∏—Ç">–ö—Ä–µ–¥–∏—Ç</option>
                                <option value="–ò–Ω–æ–µ">–ò–Ω–æ–µ</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</label>
                            <input type="number" id="debtAmount" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>–ü—Ä–∏—á–∏–Ω–∞/–û—Å–Ω–æ–≤–∞–Ω–∏–µ:</label>
                        <textarea id="debtReason" rows="2" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>–î–∞—Ç–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è:</label>
                        <input type="date" id="debtDate" required>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="btn btn-success">${editingId ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}</button>
                        <button type="button" class="btn btn-danger" onclick="hideDebtorForm()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
            
            <div id="debtorsTableContainer"></div>
        </div>
    `;
}

function showDebtorForm() {
    hideAllForms();
    editingId = null;
    const form = document.getElementById('debtorFormContainer');
    if (form) {
        form.style.display = 'block';
        document.getElementById('debtorNickname').value = '';
        document.getElementById('debtorFullName').value = '';
        document.getElementById('debtType').value = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —à—Ç—Ä–∞—Ñ';
        document.getElementById('debtAmount').value = '';
        document.getElementById('debtReason').value = '';
        document.getElementById('debtDate').value = new Date().toISOString().split('T')[0];
    }
}

function hideDebtorForm() {
    const form = document.getElementById('debtorFormContainer');
    if (form) form.style.display = 'none';
    editingId = null;
}

function saveDebtor(event) {
    event.preventDefault();
    
    const debtor = {
        id: editingId || Date.now(),
        nickname: document.getElementById('debtorNickname').value,
        fullName: document.getElementById('debtorFullName').value,
        debtType: document.getElementById('debtType').value,
        debtAmount: document.getElementById('debtAmount').value,
        debtReason: document.getElementById('debtReason').value,
        debtDate: document.getElementById('debtDate').value,
        status: '–ù–µ –ø–æ–≥–∞—à–µ–Ω',
        createdBy: currentUser.nickname,
        createdAt: new Date().toLocaleString()
    };
    
    if (editingId) {
        const index = systemData.debtors.findIndex(d => d.id === editingId);
        if (index !== -1) {
            systemData.debtors[index] = debtor;
        }
    } else {
        systemData.debtors.push(debtor);
    }
    
    if (saveAllData()) {
        showNotification('‚úÖ –î–æ–ª–∂–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
    }
    loadDebtorsTable();
    hideDebtorForm();
}

function editDebtor(id) {
    const debtor = systemData.debtors.find(d => d.id === id);
    if (debtor) {
        editingId = id;
        const form = document.getElementById('debtorFormContainer');
        if (form) {
            form.style.display = 'block';
            document.getElementById('debtorNickname').value = debtor.nickname;
            document.getElementById('debtorFullName').value = debtor.fullName;
            document.getElementById('debtType').value = debtor.debtType;
            document.getElementById('debtAmount').value = debtor.debtAmount;
            document.getElementById('debtReason').value = debtor.debtReason;
            document.getElementById('debtDate').value = debtor.debtDate;
        }
    }
}

function loadDebtorsTable() {
    const container = document.getElementById('debtorsTableContainer');
    if (!container) return;
    
    if (systemData.debtors.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–ª–∂–Ω–∏–∫–∞—Ö</div>';
        return;
    }
    
    const totalDebt = systemData.debtors.reduce((sum, debtor) => sum + parseFloat(debtor.debtAmount || 0), 0);
    
    container.innerHTML = `
        <div style="margin-bottom: 15px; padding: 10px; background: #e74c3c; color: white; border-radius: 5px;">
            <strong>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: ${totalDebt.toLocaleString()} —Ä—É–±.</strong>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>–ù–∏–∫–Ω–µ–π–º</th>
                    <th>–§–ò–û</th>
                    <th>–¢–∏–ø –¥–æ–ª–≥–∞</th>
                    <th>–°—É–º–º–∞</th>
                    <th>–ü—Ä–∏—á–∏–Ω–∞</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${systemData.debtors.map(debtor => `
                    <tr>
                        <td>${debtor.nickname}</td>
                        <td>${debtor.fullName}</td>
                        <td>${debtor.debtType}</td>
                        <td>${parseFloat(debtor.debtAmount).toLocaleString()} —Ä—É–±.</td>
                        <td>${debtor.debtReason}</td>
                        <td>${debtor.debtDate}</td>
                        <td>${debtor.status}</td>
                        <td>
                            <button class="btn" onclick="editDebtor(${debtor.id})">‚úèÔ∏è</button>
                            <button class="btn btn-danger" onclick="deleteDebtor(${debtor.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function deleteDebtor(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã?')) {
        systemData.debtors = systemData.debtors.filter(d => d.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –î–æ–ª–∂–Ω–∏–∫ —É–¥–∞–ª–µ–Ω', 'success');
        }
        loadDebtorsTable();
    }
}

// === –ú–û–î–£–õ–¨ –û–ü–ï–†–ê–¢–ò–í–ù–û–ì–û –ñ–£–†–ù–ê–õ–ê ===
function getJournalModule() {
    return `
        <div class="module">
            <h2>üìì –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∂—É—Ä–Ω–∞–ª</h2>
            
            <div class="cards-grid">
                <div class="card">
                    <h3>üõ°Ô∏è –ó–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª—É–∂–±—É</h3>
                    <div class="form-group">
                        <label>–î–∞—Ç–∞/–≤—Ä–µ–º—è –∑–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è:</label>
                        <input type="datetime-local" id="journalDutyStart">
                    </div>
                    <div class="form-group">
                        <label>–°–º–µ–Ω–∞:</label>
                        <select id="journalShift">
                            <option value="–î–Ω–µ–≤–Ω–∞—è">–î–Ω–µ–≤–Ω–∞—è</option>
                            <option value="–í–µ—á–µ—Ä–Ω—è—è">–í–µ—á–µ—Ä–Ω—è—è</option>
                            <option value="–ù–æ—á–Ω–∞—è">–ù–æ—á–Ω–∞—è</option>
                        </select>
                    </div>
                    <button class="btn btn-success" onclick="addJournalEntry('duty_start')">–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —Å–ª—É–∂–±—É</button>
                </div>
                
                <div class="card">
                    <h3>üéΩ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</h3>
                    <div class="form-group">
                        <label>–¢–∏–ø —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:</label>
                        <select id="journalEquipmentType">
                            <option value="–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç">–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç</option>
                            <option value="–î—É–±–∏–Ω–∫–∞">–î—É–±–∏–Ω–∫–∞</option>
                            <option value="–†–∞—Ü–∏—è">–†–∞—Ü–∏—è</option>
                            <option value="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ</option>
                            <option value="–û—Ä—É–∂–∏–µ">–û—Ä—É–∂–∏–µ</option>
                            <option value="–°–ø–µ—Ü—Å—Ä–µ–¥—Å—Ç–≤–∞">–°–ø–µ—Ü—Å—Ä–µ–¥—Å—Ç–≤–∞</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–ù–æ–º–µ—Ä/–ú–æ–¥–µ–ª—å:</label>
                        <input type="text" id="journalEquipmentNumber">
                    </div>
                    <button class="btn btn-success" onclick="addJournalEntry('equipment_receive')">–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É</button>
                </div>
                
                <div class="card">
                    <h3>üìù –†–∞–ø–æ—Ä—Ç</h3>
                    <div class="form-group">
                        <label>–¢–∏–ø —Ä–∞–ø–æ—Ä—Ç–∞:</label>
                        <select id="journalReportType">
                            <option value="–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ">–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ</option>
                            <option value="–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ">–ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ</option>
                            <option value="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</option>
                            <option value="–ò–Ω–æ–µ">–ò–Ω–æ–µ</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
                        <textarea id="journalReportContent" rows="3"></textarea>
                    </div>
                    <button class="btn btn-success" onclick="addJournalEntry('report')">–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–ø–æ—Ä—Ç</button>
                </div>
            </div>
            
            <div id="journalEntriesContainer" style="margin-top: 30px;">
                <h3>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π</h3>
                <div id="journalTableContainer"></div>
            </div>
        </div>
    `;
}

function addJournalEntry(type) {
    let entry = {
        id: Date.now(),
        type: type,
        officer: currentUser.fullName,
        date: new Date().toLocaleString(),
        createdBy: currentUser.nickname
    };
    
    switch(type) {
        case 'duty_start':
            entry.shift = document.getElementById('journalShift').value;
            entry.startTime = document.getElementById('journalDutyStart').value;
            entry.content = `–ó–∞—Å—Ç—É–ø–∏–ª –Ω–∞ —Å–ª—É–∂–±—É (${entry.shift} —Å–º–µ–Ω–∞)`;
            break;
            
        case 'equipment_receive':
            entry.equipmentType = document.getElementById('journalEquipmentType').value;
            entry.equipmentNumber = document.getElementById('journalEquipmentNumber').value;
            entry.content = `–ü–æ–ª—É—á–µ–Ω–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞: ${entry.equipmentType} ${entry.equipmentNumber ? '(' + entry.equipmentNumber + ')' : ''}`;
            break;
            
        case 'report':
            entry.reportType = document.getElementById('journalReportType').value;
            entry.content = document.getElementById('journalReportContent').value;
            entry.fullContent = `–†–∞–ø–æ—Ä—Ç (${entry.reportType}): ${entry.content}`;
            break;
    }
    
    systemData.journal.push(entry);
    if (saveAllData()) {
        showNotification('‚úÖ –ó–∞–ø–∏—Å—å –∂—É—Ä–Ω–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    }
    loadJournalEntries();
    
    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º
    if (type === 'equipment_receive') {
        document.getElementById('journalEquipmentNumber').value = '';
    }
    if (type === 'report') {
        document.getElementById('journalReportContent').value = '';
    }
}

function loadJournalEntries() {
    const container = document.getElementById('journalTableContainer');
    if (!container) return;
    
    if (systemData.journal.length === 0) {
        container.innerHTML = '<div class="loading">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ</div>';
        return;
    }
    
    const recentEntries = systemData.journal.slice(-50).reverse();
    
    container.innerHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–î–∞—Ç–∞/–≤—Ä–µ–º—è</th>
                    <th>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</th>
                    <th>–¢–∏–ø –∑–∞–ø–∏—Å–∏</th>
                    <th>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${recentEntries.map(entry => `
                    <tr>
                        <td>${entry.date}</td>
                        <td>${entry.officer}</td>
                        <td>${getJournalTypeLabel(entry.type)}</td>
                        <td>${entry.content || entry.fullContent || '-'}</td>
                        <td>
                            <button class="btn btn-danger" onclick="deleteJournalEntry(${entry.id})">üóëÔ∏è</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function getJournalTypeLabel(type) {
    const labels = {
        'duty_start': 'üõ°Ô∏è –ó–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ',
        'equipment_receive': 'üéΩ –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞', 
        'report': 'üìù –†–∞–ø–æ—Ä—Ç'
    };
    return labels[type] || type;
}

function deleteJournalEntry(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –∏–∑ –∂—É—Ä–Ω–∞–ª–∞?')) {
        systemData.journal = systemData.journal.filter(j => j.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ó–∞–ø–∏—Å—å –∂—É—Ä–Ω–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
        loadJournalEntries();
    }
}

// === –ú–û–î–£–õ–¨ –ù–û–í–û–°–¢–ï–ô ===
function getNewsModule() {
    const canPublish = ['–ù–∞—á–∞–ª—å–Ω–∏–∫ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ò–Ω–æ–µ –¥–æ–ø—É—â–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ'].includes(currentUser.position);
    
    return `
        <div class="module">
            <h2>üì∞ –ù–æ–≤–æ—Å—Ç–∏</h2>
            
            ${canPublish ? `
            <div class="card" style="margin-bottom: 20px;">
                <h3>–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å</h3>
                <div class="form-group">
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                    <input type="text" id="newsTitle" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏">
                </div>
                <div class="form-group">
                    <label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
                    <textarea id="newsContent" rows="4" placeholder="–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏..."></textarea>
                </div>
                <button class="btn btn-success" onclick="publishNews()">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</button>
            </div>
            ` : ''}
            
            <div id="newsContainer">
                ${systemData.news.length === 0 ? `
                    <div style="text-align: center; padding: 40px; color: #666;">
                        <h3>–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                        <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ–ø—É–±–ª–∏–∫—É–µ—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</p>
                    </div>
                ` : ''}
                ${systemData.news.slice().reverse().map(news => `
                    <div class="card" style="margin-bottom: 15px;">
                        <h3>${news.title}</h3>
                        <p>${news.content}</p>
                        <div style="font-size: 12px; color: #666; border-top: 1px solid #eee; padding-top: 10px;">
                            –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: ${news.author} | ${news.date}
                            ${news.createdBy === currentUser.nickname ? 
                                `<button class="btn btn-danger" style="float: right; padding: 2px 8px; font-size: 12px;" onclick="deleteNews(${news.id})">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
}

function publishNews() {
    const title = document.getElementById('newsTitle').value;
    const content = document.getElementById('newsContent').value;
    
    if (!title || !content) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!');
        return;
    }
    
    const news = {
        id: Date.now(),
        title: title,
        content: content,
        author: currentUser.fullName,
        date: new Date().toLocaleString(),
        createdBy: currentUser.nickname
    };
    
    systemData.news.push(news);
    if (saveAllData()) {
        showNotification('‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞', 'success');
    }
    
    document.getElementById('newsTitle').value = '';
    document.getElementById('newsContent').value = '';
    showModule('news');
}

function deleteNews(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?')) {
        systemData.news = systemData.news.filter(n => n.id !== id);
        if (saveAllData()) {
            showNotification('‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
        showModule('news');
    }
}

function loadNews() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–æ–¥—É–ª—è
}

// === –ú–û–î–£–õ–¨ –ú–ò–ù–ò-–ò–ì–† ===
function getGamesModule() {
    return `
        <div class="module">
            <h2>üéÆ –ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –∏ –º–∏–Ω–∏-–∏–≥—Ä—ã</h2>
            
            <div class="cards-grid">
                <div class="card">
                    <h3>üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤</h3>
                    <p>–°—Ä–∞–≤–Ω–∏—Ç–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</p>
                    <div class="form-group">
                        <label>–ö–æ–¥ –æ—Ç–ø–µ—á–∞—Ç–∫–∞:</label>
                        <input type="text" id="fingerprintCode" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–ø–µ—á–∞—Ç–∫–∞">
                    </div>
                    <button class="btn" onclick="checkFingerprint()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                    <div id="fingerprintResult" style="margin-top: 10px;"></div>
                </div>
                
                <div class="card">
                    <h3>üë§ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ—Ä–æ–±–æ—Ç–∞</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ—Ä–æ–±–æ—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å–≤–∏–¥–µ—Ç–µ–ª—è</p>
                    <div class="form-group">
                        <label>–§–æ—Ä–º–∞ –ª–∏—Ü–∞:</label>
                        <select id="faceShape">
                            <option value="–∫—Ä—É–≥–ª–æ–µ">–ö—Ä—É–≥–ª–æ–µ</option>
                            <option value="–æ–≤–∞–ª—å–Ω–æ–µ">–û–≤–∞–ª—å–Ω–æ–µ</option>
                            <option value="–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ">–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–¶–≤–µ—Ç –≤–æ–ª–æ—Å:</label>
                        <select id="hairColor">
                            <option value="–±–ª–æ–Ω–¥–∏–Ω">–ë–ª–æ–Ω–¥–∏–Ω</option>
                            <option value="–±—Ä—é–Ω–µ—Ç">–ë—Ä—é–Ω–µ—Ç</option>
                            <option value="—Ä—ã–∂–∏–π">–†—ã–∂–∏–π</option>
                            <option value="—à–∞—Ç–µ–Ω">–®–∞—Ç–µ–Ω</option>
                        </select>
                    </div>
                    <button class="btn" onclick="generatePhotorobot()">–°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ—Ä–æ–±–æ—Ç</button>
                    <div id="photorobotResult" style="margin-top: 10px;"></div>
                </div>
                
                <div class="card">
                    <h3>üß© –ê–Ω–∞–ª–∏–∑ —É–ª–∏–∫</h3>
                    <p>–†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ —É–ª–∏–∫–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è</p>
                    <div id="evidencePuzzle">
                        <p><strong>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
                        <p style="font-family: monospace; background: #f8f9fa; padding: 10px; border-radius: 5px;">
                            ${btoa('–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π –±—ã–ª –∑–∞–º–µ—á–µ–Ω –≤ —Ä–∞–π–æ–Ω–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞')}
                        </p>
                        <div class="form-group">
                            <label>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:</label>
                            <input type="text" id="evidenceDecode" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É">
                        </div>
                        <button class="btn" onclick="checkEvidence()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                        <div id="evidenceResult" style="margin-top: 10px;"></div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function checkFingerprint() {
    const code = document.getElementById('fingerprintCode').value;
    const resultDiv = document.getElementById('fingerprintResult');
    
    if (!code) {
        resultDiv.innerHTML = '<span style="color: red;">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–ø–µ—á–∞—Ç–∫–∞</span>';
        return;
    }
    
    const matches = systemData.citizens.filter(c => 
        c.nickname.toLowerCase().includes(code.toLowerCase()) || 
        c.fullName.toLowerCase().includes(code.toLowerCase())
    ).slice(0, 3);
    
    if (matches.length > 0) {
        resultDiv.innerHTML = `
            <span style="color: green;">‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:</span>
            <ul style="margin-top: 5px;">
                ${matches.map(m => `<li>${m.nickname} - ${m.fullName}</li>`).join('')}
            </ul>
        `;
    } else {
        resultDiv.innerHTML = '<span style="color: red;">‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</span>';
    }
}

function generatePhotorobot() {
    const faceShape = document.getElementById('faceShape').value;
    const hairColor = document.getElementById('hairColor').value;
    const resultDiv = document.getElementById('photorobotResult');
    
    const descriptions = {
        '–∫—Ä—É–≥–ª–æ–µ': 'üü°',
        '–æ–≤–∞–ª—å–Ω–æ–µ': 'ü•ö', 
        '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ': '‚óºÔ∏è'
    };
    
    const colors = {
        '–±–ª–æ–Ω–¥–∏–Ω': 'üü°',
        '–±—Ä—é–Ω–µ—Ç': '‚ö´',
        '—Ä—ã–∂–∏–π': 'üî¥',
        '—à–∞—Ç–µ–Ω': 'üü§'
    };
    
    resultDiv.innerHTML = `
        <div style="text-align: center; padding: 15px; background: #f8f9fa; border-radius: 5px;">
            <h4>–§–æ—Ç–æ—Ä–æ–±–æ—Ç —Å–æ–∑–¥–∞–Ω!</h4>
            <div style="font-size: 40px; margin: 10px 0;">üë§</div>
            <p><strong>–§–æ—Ä–º–∞ –ª–∏—Ü–∞:</strong> ${faceShape} ${descriptions[faceShape]}</p>
            <p><strong>–¶–≤–µ—Ç –≤–æ–ª–æ—Å:</strong> ${hairColor} ${colors[hairColor]}</p>
            <p style="color: green; margin-top: 10px;">‚úÖ –§–æ—Ç–æ—Ä–æ–±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
    `;
}

function checkEvidence() {
    const decode = document.getElementById('evidenceDecode').value;
    const resultDiv = document.getElementById('evidenceResult');
    const correctAnswer = '–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π –±—ã–ª –∑–∞–º–µ—á–µ–Ω –≤ —Ä–∞–π–æ–Ω–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞';
    
    if (decode === correctAnswer) {
        resultDiv.innerHTML = '<span style="color: green;">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –£–ª–∏–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞.</span>';
    } else {
        resultDiv.innerHTML = '<span style="color: red;">‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</span>';
    }
}

// === –ì–õ–ê–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ ===
function getDashboardModule() {
    const stats = {
        totalCitizens: systemData.citizens.length,
        totalDrivers: systemData.drivers.length,
        totalWanted: systemData.wanted.length,
        totalCriminalCases: systemData.criminalCases.length,
        totalDebt: systemData.debtors.reduce((sum, d) => sum + parseFloat(d.debtAmount || 0), 0)
    };
    
    return `
        <div class="module">
            <h2>üìä –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h2>
            
            <div class="cards-grid">
                <div class="card">
                    <h3>üë• –ì—Ä–∞–∂–¥–∞–Ω–µ</h3>
                    <div style="font-size: 2em; color: #3498db;">${stats.totalCitizens}</div>
                    <p>–∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ</p>
                </div>
                
                <div class="card">
                    <h3>üöó –í–æ–¥–∏—Ç–µ–ª–∏</h3>
                    <div style="font-size: 2em; color: #e74c3c;">${stats.totalDrivers}</div>
                    <p>–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π</p>
                </div>
                
                <div class="card">
                    <h3>üïµÔ∏è –†–æ–∑—ã—Å–∫</h3>
                    <div style="font-size: 2em; color: #f39c12;">${stats.totalWanted}</div>
                    <p>—Ä–∞–∑—ã—Å–∫–∏–≤–∞–µ–º—ã—Ö –ª–∏—Ü</p>
                </div>
                
                <div class="card">
                    <h3>üîç –£–≥–æ–ª–æ–≤–Ω—ã–µ –¥–µ–ª–∞</h3>
                    <div style="font-size: 2em; color: #9b59b6;">${stats.totalCriminalCases}</div>
                    <p>–≤–æ–∑–±—É–∂–¥–µ–Ω–Ω—ã—Ö –¥–µ–ª</p>
                </div>
                
                <div class="card">
                    <h3>üí≥ –î–æ–ª–≥–∏</h3>
                    <div style="font-size: 2em; color: #27ae60;">${stats.totalDebt.toLocaleString()}</div>
                    <p>—Ä—É–±–ª–µ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏</p>
                </div>
                
                <div class="card">
                    <h3>üëÆ –í–∞—à —Å—Ç–∞—Ç—É—Å</h3>
                    <div style="font-size: 1.2em; color: #2c3e50;">${currentUser.position}</div>
                    <div style="font-size: 1em; color: #7f8c8d;">${currentUser.rank}</div>
                </div>
            </div>
            
            <div style="margin-top: 30px;">
                <h3>üìà –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
                <div class="card">
                    <p><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–µ:</strong></p>
                    <ul>
                        ${systemData.citizens.slice(-3).reverse().map(c => 
                            `<li>${c.nickname} - ${c.fullName} (${new Date(c.createdAt).toLocaleDateString()})</li>`
                        ).join('')}
                    </ul>
                </div>
            </div>
        </div>
    `;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
function addTestData() {
    if (systemData.citizens.length === 0) {
        systemData.citizens = [{
            id: 1,
            nickname: "TestUser",
            fullName: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            birthDate: "1990-01-01",
            passportNumber: "1234567890",
            address: "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
            additionalInfo: "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
            criminalRecord: false,
            createdBy: "system",
            createdAt: new Date().toLocaleString()
        }];
        saveAllData();
        showNotification('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', 'success');
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
setTimeout(addTestData, 5000);
